import { Types } from '@graphql-codegen/plugin-helpers';
import { ARGUMENT_DEFINITIONS_DIRECTIVE_NAME, REFETCHABLE_DIRECTIVE_NAME } from '@nau/core';
import {
  DocumentNode,
  FragmentDefinitionNode,
  Kind,
  parse,
  parseType,
  print,
  VariableDefinitionNode,
  visit,
} from 'graphql';
import { uniqWith } from 'lodash';
import { getFragmentDefinitionsByDocumentFiles } from '../utils/graphqlAST';
import { nonNullable } from '../utils/nonNullable';
import { getArgumentDefinitionDataList } from './util';

export const transform = ({
  documentFiles,
}: {
  documentFiles: Types.DocumentFile[];
}): { documentFiles: Types.DocumentFile[] } => {
  const fragmentDefinitions = getFragmentDefinitionsByDocumentFiles(documentFiles);

  const refetchQueryMaterials: {
    [queryName: string]: { variableDefinitions: VariableDefinitionNode[]; innerFragmentName: string };
  } = {};

  fragmentDefinitions.forEach((definition) => {
    visit(definition, {
      Directive: {
        enter(node) {
          if (node.name.value !== REFETCHABLE_DIRECTIVE_NAME || !node.arguments) return false;

          const argument = node.arguments[0];
          if (argument.value.kind !== Kind.STRING) return false;
          const queryName = argument.value.value;

          const collectResult = collectVariableDefinitions({
            fragmentDefinition: definition,
            allFragmentDefinitions: fragmentDefinitions,
            collectedFragmentNames: [],
          });

          refetchQueryMaterials[queryName] = {
            innerFragmentName: definition.name.value,
            variableDefinitions: uniqWith(
              collectResult.variableDefinitions,
              (a, b) => a.variable.name.value === b.variable.name.value,
            ),
          };
          return false;
        },
      },
    });
  });

  const refetchDocumentNodes: DocumentNode[] = Object.entries(refetchQueryMaterials)
    .map(([queryName, material]) => {
      const documentNode = parse(queryString({ queryName, fragmentName: material.innerFragmentName }));
      if (documentNode.definitions[0].kind !== 'OperationDefinition') return null;
      const refetchDocumentNode: DocumentNode = {
        ...documentNode,
        definitions: [
          {
            ...documentNode.definitions[0],
            variableDefinitions: [
              ...material.variableDefinitions,
              {
                kind: Kind.VARIABLE_DEFINITION,
                type: parseType('ID!'),
                variable: { kind: Kind.VARIABLE, name: { kind: Kind.NAME, value: 'id' } },
              },
            ],
          },
        ],
      };
      return refetchDocumentNode;
    })
    .filter(nonNullable);

  const files = [
    ...documentFiles,
    ...refetchDocumentNodes.map((documentNode) => {
      return {
        document: documentNode,
        rawSDL: print(documentNode),
        location: 'generated by Nau',
      };
    }),
  ];

  return { documentFiles: files };
};

const queryString = ({ queryName, fragmentName }: { queryName: string; fragmentName: string }): string => {
  return `
    query ${queryName} {
      node(id: $id) {
        id
        __typename
        ...${fragmentName}
      }
    }`;
};

const collectVariableDefinitions = ({
  fragmentDefinition,
  allFragmentDefinitions,
  collectedFragmentNames,
}: {
  fragmentDefinition: FragmentDefinitionNode;
  allFragmentDefinitions: FragmentDefinitionNode[];
  collectedFragmentNames: string[];
}): { variableDefinitions: VariableDefinitionNode[]; collectedFragmentNames: string[] } => {
  let variableDefinitions: VariableDefinitionNode[] = [];
  let fragmentNames = [...collectedFragmentNames, fragmentDefinition.name.value];

  // Collect variable definitions
  visit(fragmentDefinition, {
    Directive: {
      enter(node) {
        if (node.name.value !== ARGUMENT_DEFINITIONS_DIRECTIVE_NAME) return;
        const argumentDataList = getArgumentDefinitionDataList(node);
        argumentDataList.forEach((data) =>
          variableDefinitions.push({
            kind: Kind.VARIABLE_DEFINITION,
            type: data.type,
            variable: { kind: Kind.VARIABLE, name: data.name },
            defaultValue: data.defaultValue,
          }),
        );
        return false;
      },
    },
  });

  // Visit nested fragments
  visit(fragmentDefinition, {
    FragmentSpread: {
      enter(node) {
        const fragmentName = node.name.value;

        if (fragmentNames.includes(fragmentName)) return false;

        const nestedFragment = allFragmentDefinitions.find((definition) => definition.name.value === fragmentName);
        if (!nestedFragment) return false;

        const nestedFragmentResult = collectVariableDefinitions({
          fragmentDefinition: nestedFragment,
          allFragmentDefinitions,
          collectedFragmentNames: fragmentNames,
        });

        variableDefinitions = [...variableDefinitions, ...nestedFragmentResult.variableDefinitions];
        fragmentNames = [...fragmentNames, ...nestedFragmentResult.collectedFragmentNames];
        return false;
      },
    },
  });

  return { variableDefinitions, collectedFragmentNames: fragmentNames };
};
